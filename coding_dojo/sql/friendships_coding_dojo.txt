SELECT * FROM friendships;
SELECT * FROM users;



INSERT INTO users (first_name, last_name, created_at, updated_at) VALUES ("Amy", "Giver", '2004-11-30', '2004-11-30');
INSERT INTO users (first_name, last_name, created_at, updated_at) VALUES ("Eli", "Byers", '2004-11-30', '2004-11-30');
INSERT INTO users (first_name, last_name, created_at, updated_at) VALUES ("Marky ", "Mark", '2004-11-30', '2004-11-30');
INSERT INTO users (first_name, last_name, created_at, updated_at) VALUES ("Kermit", "The Frog", '2004-11-30', '2004-11-30');
INSERT INTO users (first_name, last_name, created_at, updated_at) VALUES ("Big ", "Bird", '2004-11-30', '2004-11-30');
INSERT INTO users (first_name, last_name, created_at, updated_at) VALUES ("Person6 ", "Lname6", '2004-11-30', '2004-11-30');


-- Query: Have user 4 be friends with user 5, 7 and 9
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (3, 4, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (3, 6, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (3, 8, '2004-11-30', '2004-11-30');

-- Query: Have user 5 be friends with user 4, 6 and 8
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (4, 3, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (4, 5, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (4, 7, '2004-11-30', '2004-11-30');

-- Query: Have user 6 be friends with user 5 and 8
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (5, 4, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (5, 7, '2004-11-30', '2004-11-30');

-- Query: Have user 7 be friends with user 6
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (6, 5, '2004-11-30', '2004-11-30');

-- Query: Have user 8 be friends with user 3 and 9
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (7, 5, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (7, 8, '2004-11-30', '2004-11-30');

-- Query: Have user 9 be friends with user 5 and 6
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (8, 4, '2004-11-30', '2004-11-30');
INSERT INTO friendships (user_id, friend_id, created_at, updated_at) VALUES (8, 5, '2004-11-30', '2004-11-30');

-- Display the relationships created as shown in the table in the above image
SELECT users.first_name as first_name, users.last_name as last_name, user2.first_name as friend_first_name, user2.last_name as friend_last_name
FROM users 
LEFT JOIN friendships 
ON users.id = friendships.user_id 
LEFT JOIN users as user2 
ON user2.id = friendships.friend_id; 


-- NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.
SELECT user2.first_name, user2.last_name
FROM users 
LEFT JOIN friendships 
ON users.id = friendships.user_id 
LEFT JOIN users as user2 
ON user2.id = friendships.friend_id
WHERE users.id = 4 ;


-- NINJA Query: Return the count of all friendships
SELECT COUNT(friendships.user_id)
FROM friendships;


-- NINJA Query: Find out who has the most friends and return the count of their friends.
SELECT (user_id), COUNT(user_id), users.first_name
FROM friendships
JOIN users On users.id = friendships.user_id
GROUP BY user_id, users.first_name
ORDER BY COUNT(user_id) DESC LIMIT 1;



-- NINJA Query: Return the friends of the third user in alphabetical order
SELECT users.*
FROM users
JOIN friendships
On users.id = friendships.friend_id
WHERE friendships.user_id = 3 
ORDER BY first_name;


